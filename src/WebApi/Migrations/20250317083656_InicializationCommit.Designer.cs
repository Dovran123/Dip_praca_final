// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250317083656_InicializationCommit")]
    partial class InicializationCommit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Ambulancia", b =>
                {
                    b.Property<string>("Kod")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("LekarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mesto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PSC")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Kod");

                    b.HasIndex("LekarId");

                    b.ToTable("Ambulancie");
                });

            modelBuilder.Entity("Domain.Entities.Diagnoza", b =>
                {
                    b.Property<string>("KodDiagnozy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KodDiagnozy");

                    b.ToTable("Diagnozy");
                });

            modelBuilder.Entity("Domain.Entities.Doplnok", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodKategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazovDoplnku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("PO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KodKategorie");

                    b.ToTable("Doplnky");
                });

            modelBuilder.Entity("Domain.Entities.Kategoria", b =>
                {
                    b.Property<string>("Kod")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("NadriadenaKategorieKod")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("Kod");

                    b.HasIndex("NadriadenaKategorieKod");

                    b.ToTable("Kategoria");

                    b.HasDiscriminator().HasValue("Kategoria");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.KategoriaLiekov", b =>
                {
                    b.Property<string>("Kod")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("Kod");

                    b.ToTable("KategoriaLiekov");
                });

            modelBuilder.Entity("Domain.Entities.Lekar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KodOdbornoti")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("LicencneCislo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PouzivatelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KodOdbornoti");

                    b.HasIndex("PouzivatelId")
                        .IsUnique();

                    b.ToTable("Lekari");
                });

            modelBuilder.Entity("Domain.Entities.Liek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodKategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazovDoplnku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("PO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KodKategorie");

                    b.ToTable("Lieky");
                });

            modelBuilder.Entity("Domain.Entities.LimitPredpisu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CasovyOkamih")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LimitValue")
                        .HasColumnType("int");

                    b.Property<int?>("MonthsLimit")
                        .HasColumnType("int");

                    b.Property<int?>("WeeksLimit")
                        .HasColumnType("int");

                    b.Property<int?>("YearsLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LimityPredpisov");
                });

            modelBuilder.Entity("Domain.Entities.OdbornostLekara", b =>
                {
                    b.Property<string>("Identifikator")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("PopisOdbornosti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Identifikator");

                    b.ToTable("OdbornostiLekarov");
                });

            modelBuilder.Entity("Domain.Entities.Pacient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PoistenieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PouzivatelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PoistenieId");

                    b.HasIndex("PouzivatelId")
                        .IsUnique();

                    b.ToTable("Pacienti");
                });

            modelBuilder.Entity("Domain.Entities.Poistenie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("ICP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("JeNeplatic")
                        .HasColumnType("bit");

                    b.Property<string>("KodPoistovne")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool?>("MaNarokNaOdkladnuZS")
                        .HasColumnType("bit");

                    b.Property<int>("PoistnyVztahPoistenca")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ZaciatokEuPoistenia")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Poistenia");
                });

            modelBuilder.Entity("Domain.Entities.Potravina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodKategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazovDoplnku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("PO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KodKategorie");

                    b.ToTable("Potraviny");
                });

            modelBuilder.Entity("Domain.Entities.Pouzivatel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Heslo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("JePrimatel")
                        .HasColumnType("bit");

                    b.Property<string>("Meno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Priezvisko")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RodneCislo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("TokenPrimatela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RodneCislo")
                        .IsUnique();

                    b.ToTable("Pouzivatelia");
                });

            modelBuilder.Entity("Domain.Entities.PrekricnyZaznam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AmbulanciaKod")
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("DatumPredpisu")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnozaKod")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("LekarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PacientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PocetDni")
                        .HasColumnType("int");

                    b.Property<string>("Stav")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AmbulanciaKod");

                    b.HasIndex("DiagnozaKod");

                    b.HasIndex("LekarId");

                    b.HasIndex("PacientId");

                    b.ToTable("PreskripcneZaznamy");
                });

            modelBuilder.Entity("Domain.Entities.PrekricnyZaznamLiek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LiekId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrekricnyZaznamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LiekId");

                    b.HasIndex("PrekricnyZaznamId");

                    b.ToTable("PrekricnyZaznamLiekov");
                });

            modelBuilder.Entity("Domain.Entities.PrekricnyZaznamPomocky", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoplnokId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mnozstvo")
                        .HasColumnType("int");

                    b.Property<Guid>("PrekricnyZaznamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoplnokId");

                    b.HasIndex("PrekricnyZaznamId");

                    b.ToTable("PrekricnyZaznamDoplnok");
                });

            modelBuilder.Entity("Domain.Entities.PrekricnyZaznamPotraviny", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PotravinaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrekricnyZaznamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PotravinaId");

                    b.HasIndex("PrekricnyZaznamId");

                    b.ToTable("PrekricnyZaznamPotraviny");
                });

            modelBuilder.Entity("Domain.Entities.KategoriaDoplnok", b =>
                {
                    b.HasBaseType("Domain.Entities.Kategoria");

                    b.Property<Guid?>("LimitPredpisuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypDoplnku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("LimitPredpisuId");

                    b.HasDiscriminator().HasValue("KategoriaDoplnok");
                });

            modelBuilder.Entity("Domain.Entities.KategoriaPotravina", b =>
                {
                    b.HasBaseType("Domain.Entities.Kategoria");

                    b.Property<string>("TypPotraviny")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("KategoriaPotravina");
                });

            modelBuilder.Entity("Domain.Entities.Ambulancia", b =>
                {
                    b.HasOne("Domain.Entities.Lekar", "Lekar")
                        .WithMany("Ambulancie")
                        .HasForeignKey("LekarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lekar");
                });

            modelBuilder.Entity("Domain.Entities.Doplnok", b =>
                {
                    b.HasOne("Domain.Entities.KategoriaDoplnok", "Kategoria")
                        .WithMany("Doplnky")
                        .HasForeignKey("KodKategorie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategoria");
                });

            modelBuilder.Entity("Domain.Entities.Kategoria", b =>
                {
                    b.HasOne("Domain.Entities.Kategoria", "NadriadenaKategoria")
                        .WithMany("Podkategorie")
                        .HasForeignKey("NadriadenaKategorieKod");

                    b.Navigation("NadriadenaKategoria");
                });

            modelBuilder.Entity("Domain.Entities.Lekar", b =>
                {
                    b.HasOne("Domain.Entities.OdbornostLekara", "Odbornost")
                        .WithMany()
                        .HasForeignKey("KodOdbornoti")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pouzivatel", "Pouzivatel")
                        .WithOne("Lekar")
                        .HasForeignKey("Domain.Entities.Lekar", "PouzivatelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Odbornost");

                    b.Navigation("Pouzivatel");
                });

            modelBuilder.Entity("Domain.Entities.Liek", b =>
                {
                    b.HasOne("Domain.Entities.KategoriaLiekov", "Kategoria")
                        .WithMany("Lieky")
                        .HasForeignKey("KodKategorie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategoria");
                });

            modelBuilder.Entity("Domain.Entities.Pacient", b =>
                {
                    b.HasOne("Domain.Entities.Poistenie", "Poistenie")
                        .WithMany()
                        .HasForeignKey("PoistenieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pouzivatel", "Pouzivatel")
                        .WithOne("Pacient")
                        .HasForeignKey("Domain.Entities.Pacient", "PouzivatelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poistenie");

                    b.Navigation("Pouzivatel");
                });

            modelBuilder.Entity("Domain.Entities.Potravina", b =>
                {
                    b.HasOne("Domain.Entities.KategoriaPotravina", "Kategoria")
                        .WithMany("Potraviny")
                        .HasForeignKey("KodKategorie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategoria");
                });

            modelBuilder.Entity("Domain.Entities.PrekricnyZaznam", b =>
                {
                    b.HasOne("Domain.Entities.Ambulancia", "Ambulancia")
                        .WithMany("PrekricneZaznamy")
                        .HasForeignKey("AmbulanciaKod")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Diagnoza", "Diagnoza")
                        .WithMany()
                        .HasForeignKey("DiagnozaKod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lekar", "Lekar")
                        .WithMany("Predpisy")
                        .HasForeignKey("LekarId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Pacient", "Pacient")
                        .WithMany("Preskripcie")
                        .HasForeignKey("PacientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Ambulancia");

                    b.Navigation("Diagnoza");

                    b.Navigation("Lekar");

                    b.Navigation("Pacient");
                });

            modelBuilder.Entity("Domain.Entities.PrekricnyZaznamLiek", b =>
                {
                    b.HasOne("Domain.Entities.Liek", "Liek")
                        .WithMany()
                        .HasForeignKey("LiekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PrekricnyZaznam", "PrekricnyZaznam")
                        .WithMany()
                        .HasForeignKey("PrekricnyZaznamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Liek");

                    b.Navigation("PrekricnyZaznam");
                });

            modelBuilder.Entity("Domain.Entities.PrekricnyZaznamPomocky", b =>
                {
                    b.HasOne("Domain.Entities.Doplnok", "Doplnok")
                        .WithMany()
                        .HasForeignKey("DoplnokId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PrekricnyZaznam", "PrekricnyZaznam")
                        .WithMany()
                        .HasForeignKey("PrekricnyZaznamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doplnok");

                    b.Navigation("PrekricnyZaznam");
                });

            modelBuilder.Entity("Domain.Entities.PrekricnyZaznamPotraviny", b =>
                {
                    b.HasOne("Domain.Entities.Potravina", "Potravina")
                        .WithMany()
                        .HasForeignKey("PotravinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PrekricnyZaznam", "PrekricnyZaznam")
                        .WithMany()
                        .HasForeignKey("PrekricnyZaznamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Potravina");

                    b.Navigation("PrekricnyZaznam");
                });

            modelBuilder.Entity("Domain.Entities.KategoriaDoplnok", b =>
                {
                    b.HasOne("Domain.Entities.LimitPredpisu", "LimitPredpisu")
                        .WithMany()
                        .HasForeignKey("LimitPredpisuId");

                    b.Navigation("LimitPredpisu");
                });

            modelBuilder.Entity("Domain.Entities.Ambulancia", b =>
                {
                    b.Navigation("PrekricneZaznamy");
                });

            modelBuilder.Entity("Domain.Entities.Kategoria", b =>
                {
                    b.Navigation("Podkategorie");
                });

            modelBuilder.Entity("Domain.Entities.KategoriaLiekov", b =>
                {
                    b.Navigation("Lieky");
                });

            modelBuilder.Entity("Domain.Entities.Lekar", b =>
                {
                    b.Navigation("Ambulancie");

                    b.Navigation("Predpisy");
                });

            modelBuilder.Entity("Domain.Entities.Pacient", b =>
                {
                    b.Navigation("Preskripcie");
                });

            modelBuilder.Entity("Domain.Entities.Pouzivatel", b =>
                {
                    b.Navigation("Lekar");

                    b.Navigation("Pacient");
                });

            modelBuilder.Entity("Domain.Entities.KategoriaDoplnok", b =>
                {
                    b.Navigation("Doplnky");
                });

            modelBuilder.Entity("Domain.Entities.KategoriaPotravina", b =>
                {
                    b.Navigation("Potraviny");
                });
#pragma warning restore 612, 618
        }
    }
}
