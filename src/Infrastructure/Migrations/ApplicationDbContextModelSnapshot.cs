// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PublishedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("Domain.Entities.Lekar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicencneCislo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Meno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priezvisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lekari");
                });

            modelBuilder.Entity("Domain.Entities.Liek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Davkovanie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodLieku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mnozstvo")
                        .HasColumnType("int");

                    b.Property<string>("NazovLieku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PreskripcnyZaznamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sarza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PreskripcnyZaznamId");

                    b.ToTable("Lieky");
                });

            modelBuilder.Entity("Domain.Entities.Pacient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Meno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priezvisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RodneCislo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pacienti");
                });

            modelBuilder.Entity("Domain.Entities.PreskripcnyZaznam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatumPredpisu")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LekarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PacientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Stav")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LekarId");

                    b.HasIndex("PacientId");

                    b.ToTable("PreskripcneZaznamy");
                });

            modelBuilder.Entity("Domain.Entities.Liek", b =>
                {
                    b.HasOne("Domain.Entities.PreskripcnyZaznam", "PreskripcnyZaznam")
                        .WithMany("Lieky")
                        .HasForeignKey("PreskripcnyZaznamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreskripcnyZaznam");
                });

            modelBuilder.Entity("Domain.Entities.PreskripcnyZaznam", b =>
                {
                    b.HasOne("Domain.Entities.Lekar", "Lekar")
                        .WithMany("Predpisy")
                        .HasForeignKey("LekarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pacient", "Pacient")
                        .WithMany("Preskripcie")
                        .HasForeignKey("PacientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lekar");

                    b.Navigation("Pacient");
                });

            modelBuilder.Entity("Domain.Entities.Lekar", b =>
                {
                    b.Navigation("Predpisy");
                });

            modelBuilder.Entity("Domain.Entities.Pacient", b =>
                {
                    b.Navigation("Preskripcie");
                });

            modelBuilder.Entity("Domain.Entities.PreskripcnyZaznam", b =>
                {
                    b.Navigation("Lieky");
                });
#pragma warning restore 612, 618
        }
    }
}
